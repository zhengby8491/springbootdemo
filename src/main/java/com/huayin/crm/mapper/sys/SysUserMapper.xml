<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huayin.crm.mapper.sys.SysUserMapper">
	<resultMap id="BaseResultMap" type="com.huayin.crm.vo.sys.SysUser">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="version" property="version" jdbcType="BIGINT" />
		<result column="loginname" property="loginname" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	</resultMap>
	
	<sql id="Where_Record">
		<where>
			<if test="loginname != null">
				<bind name="loginnameLike" value="'%'+ loginname + '%'" />
				and loginname like #{loginnameLike}
			</if>
			<if test="mobile != null">
				<bind name="mobileLike" value="'%'+ mobile + '%'" />
				and mobile like #{mobileLike}
			</if>
			<if test="email != null">
				<bind name="emailLike" value="'%'+ email + '%'" />
				and email like #{emailLike}
			</if>
		</where>
	</sql>
	
	<sql id="Base_Column_List">
		id, version, loginname, password, mobile, email, create_time, update_time
	</sql>
	
	<select id="get" resultMap="BaseResultMap">
		select distinct
		<include refid="Base_Column_List" />
		from sys_user where id = #{id, jdbcType=BIGINT}
	</select>
	
	<select id="getByLoginname" resultMap="BaseResultMap">
		select distinct
		<include refid="Base_Column_List" />
		from sys_user where loginname = #{loginname, jdbcType=VARCHAR}
	</select>
	
	<select id="selectList" resultMap="BaseResultMap">
		select distinct
		<include refid="Base_Column_List" />
		from sys_user
		<include refid="Where_Record" />
	</select>
	
	<insert id="insertSelective">
		insert into sys_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="version != null">
				version,
			</if>
			<if test="loginname != null">
				loginname,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="mobile != null">
				mobile,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id, jdbcType=BIGINT},
			</if>
			<if test="version != null">
				#{version, jdbcType=BIGINT},
			</if>
			<if test="loginname != null">
				#{loginname, jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password, jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile, jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email, jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime, jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				#{updateTime, jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>

	<update id="updateByIdSelective">
		update sys_user
		<set>
			<if test="version != null">
				version = #{version, jdbcType=BIGINT},
			</if>
			<if test="loginname != null">
				loginname = #{loginname, jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password, jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				mobile = #{mobile, jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email, jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime, jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id, jdbcType=BIGINT}
	</update>

	<update id="updatePassword">
		update sys_user
		set password = #{password, jdbcType=VARCHAR}
		where id = #{id, jdbcType=BIGINT}
	</update>

	<delete id="deleteById">
		delete from sys_user where id = #{id, jdbcType=BIGINT}
	</delete>

	<delete id="deleteByIds">
		delete from sys_user
		where id in
		<foreach collection="ids" index="index" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
</mapper>